package web

import (
	"fmt"
	"github.com/vk-rv/warnly/internal/warnly"
	"strconv"
	"strings"
)

templ Events(res *warnly.ListEventsResult) {
	<div id="issue_content" class="mt-6">
		<div
			x-data={ alpineData(res) }
			@click.away="hideContextMenu()"
		>
			<div class="mb-4 relative">
				<div class="flex items-center gap-2 p-2 bg-white border border-border rounded-lg min-h-[40px] flex-wrap">
					<template x-for="(filter, index) in filters" :key="index">
						<div class="flex items-center gap-1 bg-gray-100 px-2 py-1 rounded text-sm">
							<span x-text="filter.key"></span>
							<span x-text="filter.operator"></span>
							<span x-text="filter.value" class="text-black font-bold"></span>
							<button @click="removeFilter(index)" class="ml-1 text-gray-500 hover:text-gray-700">×</button>
						</div>
					</template>
					<input
						type="text"
						x-model="searchQuery"
						placeholder="Search errors..."
						class="flex-1 outline-none bg-transparent min-w-[200px]"
					/>
				</div>
			</div>
			<div
				x-show="contextMenu.show"
				x-transition
				:style="`position: fixed; left: ${contextMenu.x}px; top: ${contextMenu.y}px`"
				class="bg-white border border-border rounded-lg shadow-lg py-1 z-50"
				@click.away="hideContextMenu"
			>
				<button
					@click="addFilter(contextMenu.column, contextMenu.value)"
					class="w-full px-4 py-2 text-sm text-left hover:bg-gray-50"
				>
					Add to filter
				</button>
				<button
					@click="excludeFromFilter(contextMenu.column, contextMenu.value)"
					class="w-full px-4 py-2 text-sm text-left hover:bg-gray-50"
				>
					Exclude from filter
				</button>
			</div>
			<div class="overflow-x-auto border border-border rounded-lg">
				<div class="p-4 border-t border-border flex items-center justify-end gap-4 text-xs text-gray-500">
					<span>
						{ paginationSummary(res) }
					</span>
					<div class="flex gap-2">
						<button @click={ fmt.Sprintf("paginatePrev('%d', '%d')", res.ProjectID, res.IssueID) } class="p-1 cursor-pointer rounded border border-border">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
							</svg>
						</button>
						<button @click={ fmt.Sprintf("paginateNext('%d', '%d')", res.ProjectID, res.IssueID) } class="p-1 cursor-pointer rounded border border-border">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
							</svg>
						</button>
					</div>
				</div>
				<table id="eventtable" class="w-full">
					<thead>
						<tr class="border-b border-border bg-gray-50">
							<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">ID</th>
							<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">CREATED</th>
							<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">TITLE</th>
							<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">RELEASE</th>
							<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">ENVIRONMENT</th>
							<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">USER</th>
							<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">OS</th>
						</tr>
					</thead>
					<tbody>
						<template x-for="event in events" :key="event.id">
							<tr class="border-b border-border hover:bg-gray-50">
								<td
									@contextmenu.prevent="showContextMenu($event, 'event.id', event.id)"
									@click="
										navigateToEvent(event.full_id); 
										activeTab = 'details';
									"
									class="px-4 py-2 text-sm text-black cursor-pointer font-semibold"
									x-text="event.id"
								></td>
								<td @contextmenu.prevent="showContextMenu($event, 'timestamp', event.timestamp)" class="px-4 py-2 text-sm" x-text="event.timestamp"></td>
								<td @contextmenu.prevent="showContextMenu($event, 'title', event.title)" class="px-4 py-2 text-sm" x-text="event.title"></td>
								<td @contextmenu.prevent="showContextMenu($event, 'release', event.release)" class="px-4 py-2 text-sm text-black" x-text="event.release"></td>
								<td @contextmenu.prevent="showContextMenu($event, 'environment', event.environment)" class="px-4 py-2 text-sm relative group">
									<div class="flex items-center gap-1">
										<span x-text="event.environment"></span>
										<button @click="showContextMenu($event, 'environment', event.environment)" class="opacity-0 group-hover:opacity-100 text-gray-400">•••</button>
									</div>
								</td>
								<td @contextmenu.prevent="showContextMenu($event, 'user', event.user)" class="px-4 py-2 text-sm text-gray-500" x-text="event.user"></td>
								<td @contextmenu.prevent="showContextMenu($event, 'os', event.os)" class="px-4 py-2 text-sm text-gray-500" x-text="event.os"></td>
							</tr>
						</template>
					</tbody>
				</table>
			</div>
		</div>
	</div>
}

func totalErrors(res *warnly.ListEventsResult) string {
	return strconv.Itoa(int(res.TotalEvents))
}

func currentErrors(res *warnly.ListEventsResult) string {
	return strconv.Itoa(len(res.Events))
}

func alpineData(res *warnly.ListEventsResult) string {
	const noValue = "(no value)"
	events := make([]string, len(res.Events))
	for i, event := range res.Events {
		title := event.Title
		if title == "" {
			title = noValue
		}
		if strings.Contains(title, warnly.DefaultMessage) {
			title = strings.ReplaceAll(title, warnly.DefaultMessage, "")
			title = strings.ReplaceAll(title, ":", "")
		}
		release := event.Release
		if release == "" {
			release = noValue
		}
		env := event.Env
		if env == "" {
			env = noValue
		}
		user := event.DisplayUser()
		os := event.OS
		if os == "" {
			os = noValue
		}
		events[i] = fmt.Sprintf(
			`{ id: '%s', full_id: '%s', timestamp: '%s', title: '%s', release: '%s', environment: '%s', user: '%s', os: '%s'}`,
			event.EventID[:8], event.EventID, event.CreatedAt.Format("Jan 2, 2006 3:04:05 PM"), title, release, env, user, os,
		)
	}

	return fmt.Sprintf(`{
		searchQuery: '',
		filters: [
			/* { key: 'issue.id', operator: 'is', value: '6194848708' }, */
			/* { key: 'environment', operator: 'is', value: 'stage' } */
		],
		events: [%s],
		contextMenu: {
			show: false,
			x: 0,
			y: 0,
			column: '',
			value: ''
		},
		removeFilter(index) {
			this.filters.splice(index, 1)
		},
		addFilter(column, value) {
			this.filters.push({ key: column, operator: 'is', value: value })
			this.contextMenu.show = false
		},
		excludeFromFilter(column, value) {
			this.filters.push({ key: column, operator: 'is not', value: value })
			this.contextMenu.show = false
		},
		showContextMenu(event, column, value) {
			event.preventDefault()
			this.contextMenu.show = true
			this.contextMenu.x = event.clientX
			this.contextMenu.y = event.clientY
			this.contextMenu.column = column
			this.contextMenu.value = value
		},
		hideContextMenu() {
			this.contextMenu.show = false
		},
		navigateToEvent(eventId) {
			const url = new URL('/projects/' + %s + '/issues/' + %s, window.location.origin);
			url.searchParams.set('event_id', eventId);
			url.searchParams.set('period', this.period);
			url.searchParams.set('source', 'issue');
			htmx.ajax('GET', url.toString(), {
				target: '#issue_content',
				swap: 'outerHTML settle:0',
			});
		},
		offset: %d,
		period: '14d',
		eventCount: %d,
		totalErrors: %d,
		paginatePrev(pid, issueID) {
			if (this.offset <= 0) {
				this.offset = 0;
				return;
			}
			this.offset = Math.max(0, this.offset - 50);
			const url = new URL('/projects/' + pid + '/issues/' + issueID + '/events', window.location.origin);
			url.searchParams.set('offset', this.offset);
			url.searchParams.set('period', this.period);
			htmx.ajax('GET', url.toString(), {
				target: '#issue_content',
				swap: 'outerHTML settle:0',
			}).then(() => {
				this.updateEventCount();
			});
		},
		paginateNext(pid, issueID) {
			if (this.offset + 50 > this.totalErrors) {
				return;
			} else {
				this.offset += 50;
			}
			const url = new URL('/projects/' + pid + '/issues/' + issueID + '/events', window.location.origin);
			url.searchParams.set('offset', this.offset);
			url.searchParams.set('period', this.period);
			htmx.ajax('GET', url.toString(), {
				target: '#issue_content',
				swap: 'outerHTML settle:0',
			}).then(() => {
				this.updateEventCount();
			});
		},
		updateEventCount() {
			const tableBody = document.querySelector('#eventtable tbody');
			if (tableBody) {
				this.eventCount = tableBody.rows.length;
			}
		}
	}`, strings.Join(events, ", "), strconv.Itoa(int(res.ProjectID)), strconv.Itoa(int(res.IssueID)), res.Offset, len(res.Events), res.TotalEvents)
}

// paginationSummary returns a summary string for the pagination status.
func paginationSummary(res *warnly.ListEventsResult) string {
	const limit = 50

	if res.TotalEvents == 0 {
		return "Showing 0-0 of 0 matching events (0 pages)"
	}

	start := res.Offset + 1
	end := res.Offset + len(res.Events)

	currentPage := (res.Offset / limit) + 1
	totalPages := int((res.TotalEvents + limit - 1) / limit)

	var pageInfo string
	if totalPages == 1 {
		pageInfo = "1 page"
	} else {
		pageInfo = fmt.Sprintf("page %d of %d", currentPage, totalPages)
	}

	return fmt.Sprintf("Showing %d-%d of %d matching events (%s)", start, end, res.TotalEvents, pageInfo)
}
