package web

import (
	"encoding/json"
	"fmt"
	"github.com/vk-rv/warnly/internal/warnly"
	"time"
)

// Issues is the main template that includes filters header and issue list body
templ Issues(res *warnly.ListIssuesResult) {
	<div class="max-w-7xl bg-white mx-auto p-6">
		@issuesHeader()
		@IssuesFiltersAndBody(res)
	</div>
}

// IssuesFiltersAndBody contains the filters and the body - used for HTMX updates
templ IssuesFiltersAndBody(res *warnly.ListIssuesResult) {
	<div
		id="issues-container"
		x-data={ getIssuesAlpineData(res) }
	>
		@issuesFiltersBar(res)
		if res.NoIssues() {
			<span>No issues found</span>
		} else {
			@IssuesBody(res)
		}
	</div>
}

// IssuesBody - the issues list and pagination that gets updated via HTMX
templ IssuesBody(res *warnly.ListIssuesResult) {
	<div id="issues-body">
		@issuesTable(res)
		@issuesPagination(res)
	</div>
}

templ issuesHeader() {
	<header class="mb-6">
		<div class="flex items-center gap-2 mb-4">
			<h1 class="text-xl font-semibold">Issues</h1>
		</div>
		<nav class="border-b border-gray-300 border-[hsl(var(--border))]">
			<ul class="flex gap-6">
				<li class="border-b-2 border-black pb-2">
					<a href="#" class="text-sm font-medium">All Issues</a>
				</li>
			</ul>
		</nav>
	</header>
}

templ issuesFiltersBar(res *warnly.ListIssuesResult) {
	<div class="mb-6">
		<div class="flex gap-2 mb-3">
			<div class="flex">
				@projectSelector(res.Projects, res.RequestedProject)
			</div>
			@timePeriodSelectorWrapper(res.Request.Period)
		</div>
		<div class="relative">
			@searchBar(res)
		</div>
	</div>
}

templ projectSelector(projects []warnly.Project, requestedProject string) {
	<div x-data={ fmt.Sprintf("{ open: false, selected: '%s' }", getSelectedProjectName(requestedProject)) }>
		<button
			@click="open = !open"
			class="inline-flex cursor-pointer items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
		>
			<span x-text="selected"></span>
			<svg class="ml-2 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
			</svg>
		</button>
		<div
			x-show="open"
			@click.away="open = false"
			x-cloak
			class="absolute mt-2 w-48 rounded-md bg-white shadow-lg z-10"
		>
			<ul class="py-1 text-sm text-gray-700">
				<li>
					<a
						href="#"
						@click.prevent="selected = 'All Projects'; $dispatch('project-changed', { project: '' }); open = false"
						class="block px-4 py-2 hover:bg-gray-100"
					>
						All Projects
					</a>
				</li>
				for _, project := range projects {
					<li>
						<a
							href="#"
							@click.prevent={ fmt.Sprintf("selected = '%s'; $dispatch('project-changed', { project: '%s' }); open = false", project.Name, project.Name) }
							class="block px-4 py-2 hover:bg-gray-100"
						>
							{ project.Name }
						</a>
					</li>
				}
			</ul>
		</div>
	</div>
}

templ timePeriodSelectorWrapper(initialPeriod string) {
	<div class="relative z-20" x-data={ fmt.Sprintf("timePeriodSelector('%s')", getPeriodOrDefault(initialPeriod)) }>
		<div class="flex border hover:bg-gray-50 border-gray-300 rounded-md overflow-hidden bg-white">
			<button
				@click="toggleDropdown()"
				class="flex cursor-pointer items-center px-4 py-2 text-sm"
			>
				<span x-text="displayLabel"></span>
				<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor" :class="{'transform rotate-180': isOpen}">
					<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
				</svg>
			</button>
		</div>
		@timePeriodDropdown()
	</div>
}

templ timePeriodDropdown() {
	<div
		x-show="isOpen"
		x-cloak
		@click.away="isOpen = false"
		class="mt-1 bg-white border border-gray-200 rounded-md shadow-lg absolute z-50"
		style="left: 0; min-width: 400px; width: max-content;"
	>
		<!-- Presets -->
		<div x-show="!showCalendar">
			<div class="p-4 border-b border-gray-200">
				<h3 class="text-sm font-medium text-gray-800">Filter Time Range</h3>
			</div>
			<div class="p-3">
				<input
					type="text"
					x-model="customRangeInput"
					placeholder="Custom range: 2h, 4d, 8w..."
					class="w-full p-2 border text-sm rounded-md focus:outline-none border-gray-300"
					@keydown.enter="applyCustomRange()"
					:class="{'border-red-500': customRangeError}"
				/>
				<div x-show="customRangeError" class="text-red-500 text-xs mt-1" x-text="customRangeError"></div>
			</div>
			<div class="py-2">
				<template x-for="(preset, index) in presets" :key="index">
					<div
						@click="selectPreset(preset.value)"
						class="flex text-sm items-center px-3 py-2 hover:bg-gray-50 cursor-pointer"
					>
						<div class="w-6">
							<svg
								x-show="selectedPreset === preset.value"
								xmlns="http://www.w3.org/2000/svg"
								class="h-5 w-5 text-black-500"
								viewBox="0 0 20 20"
								fill="currentColor"
							>
								<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
							</svg>
						</div>
						<span
							class="ml-2"
							:class="{'text-black-600 font-medium': selectedPreset === preset.value}"
							x-text="preset.label"
						></span>
					</div>
				</template>
				<div
					@click="openCalendar()"
					class="flex items-center text-sm justify-between px-3 py-2 hover:bg-gray-50 cursor-pointer"
				>
					<div class="flex items-center">
						<div class="w-6">
							<svg
								x-show="selectedPreset === 'custom-range'"
								xmlns="http://www.w3.org/2000/svg"
								class="h-5 w-5 text-indigo-500"
								viewBox="0 0 20 20"
								fill="currentColor"
							>
								<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
							</svg>
						</div>
						<span
							class="ml-2"
							:class="{'text-indigo-600 font-medium': selectedPreset === 'custom-range'}"
						>Absolute date</span>
					</div>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
						<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
					</svg>
				</div>
			</div>
		</div>
		<!-- Calendar view -->
		<div x-show="showCalendar" x-cloak style="min-width: 600px; width: max-content;">
			<div class="p-4 border-b border-gray-200 flex items-center justify-between">
				<button @click="closeCalendar()" class="text-gray-600 hover:text-gray-900">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
						<path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>
					</svg>
				</button>
				<h3 class="text-sm font-medium text-gray-800">Select Date Range</h3>
				<div></div>
			</div>
			<div class="p-4 grid grid-cols-2 gap-6">
				<!-- Start Date -->
				<div>
					<label class="block text-xs font-medium text-gray-700 mb-2">Start Date & Time</label>
					<input
						type="date"
						x-model="startDate"
						class="w-full p-2 border border-gray-300 rounded text-sm"
					/>
					<div class="mt-2 flex gap-2 items-center text-sm">
						<input
							type="number"
							x-model="startHour"
							min="1"
							max="12"
							class="w-16 p-1 border border-gray-300 rounded text-center"
						/>
						<span>:</span>
						<input
							type="number"
							x-model="startMinute"
							min="0"
							max="59"
							class="w-16 p-1 border border-gray-300 rounded text-center"
						/>
						<select x-model="startPeriod" class="p-1 border border-gray-300 rounded">
							<option value="AM">AM</option>
							<option value="PM">PM</option>
						</select>
					</div>
				</div>
				<!-- End Date -->
				<div>
					<label class="block text-xs font-medium text-gray-700 mb-2">End Date & Time</label>
					<input
						type="date"
						x-model="endDate"
						class="w-full p-2 border border-gray-300 rounded text-sm"
					/>
					<div class="mt-2 flex gap-2 items-center text-sm">
						<input
							type="number"
							x-model="endHour"
							min="1"
							max="12"
							class="w-16 p-1 border border-gray-300 rounded text-center"
						/>
						<span>:</span>
						<input
							type="number"
							x-model="endMinute"
							min="0"
							max="59"
							class="w-16 p-1 border border-gray-300 rounded text-center"
						/>
						<select x-model="endPeriod" class="p-1 border border-gray-300 rounded">
							<option value="AM">AM</option>
							<option value="PM">PM</option>
						</select>
					</div>
				</div>
			</div>
			<div class="p-4 border-t border-gray-200 flex justify-end gap-2">
				<button
					@click="closeCalendar()"
					class="px-4 py-2 text-sm border border-gray-300 rounded hover:bg-gray-50"
				>
					Cancel
				</button>
				<button
					@click="applyAbsoluteRange()"
					class="px-4 py-2 text-sm bg-black text-white rounded hover:bg-gray-800"
				>
					Apply
				</button>
			</div>
		</div>
	</div>
}

templ searchBar(res *warnly.ListIssuesResult) {
	<div
		x-data={ fmt.Sprintf("searchInput(%s, %s)", getSearchTokens(res.Request), getPopularTagsCategories(res.PopularTags)) }
		class="search-container"
		@click.away="closeAllDropdowns()"
	>
		<div class="flex border rounded-lg bg-white border-gray-300 min-h-[2.5rem]">
			<div class="relative flex-1 flex items-center px-2 text-sm">
				<div class="text-purple-500 ml-2 mr-1 flex-shrink-0">
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="black">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
					</svg>
				</div>
				<div class="search-input-wrapper" @click="focusInput()">
					<template x-for="(token, index) in tokens" :key="index">
						<div class="tag-pill">
							<template x-if="!token.isRawText">
								<div class="flex items-center">
									<span x-text="token.key" class="text-gray-800"></span>
									<span
										class="tag-pill-operator mx-1"
										x-text="token.operator"
										@click.stop="openOperatorDropdown(index, $event)"
									></span>
									<span x-text="token.value" class="text-gray-800"></span>
								</div>
							</template>
							<template x-if="token.isRawText">
								<span x-text="token.value" class="text-gray-800"></span>
							</template>
							<button @click.stop="removeToken(index)" class="ml-1 text-gray-500 hover:text-gray-700">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
								</svg>
							</button>
						</div>
					</template>
					<input
						x-ref="searchInput"
						type="text"
						x-model="inputValue"
						:placeholder="tokens.length === 0 ? 'Search for issues, tags, and more' : ''"
						class="search-input"
						@click="handleInputClick()"
						@focus="handleInputFocus()"
						@keydown.enter="handleEnterKey()"
						@keydown.backspace="handleBackspace()"
						@input="handleInput()"
					/>
				</div>
				<button
					x-show="tokens.length > 0 || inputValue.length > 0"
					@click.stop="clearAll()"
					class="mr-4 text-gray-400 hover:text-gray-600"
					x-cloak
				>
					<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
			</div>
		</div>
		@searchSuggestions()
		@operatorDropdown()
	</div>
}

templ searchSuggestions() {
	<div
		x-show="showTagSuggestions"
		class="dropdown-container text-sm"
		x-cloak
	>
		<div class="flex border-b border-gray-200 px-4 py-2 justify-between items-center">
			<div class="flex space-x-4">
				<template x-for="(category, index) in filterCategories" :key="index">
					<button
						class="px-2 py-1 rounded"
						:class="category.active ? 'bg-black text-white' : 'text-gray-600 hover:bg-gray-200'"
						x-text="category.name"
						@click="setActiveCategory(index)"
					></button>
				</template>
			</div>
			<!-- Custom value input for tag values mode -->
			<template x-if="isInTagValuesMode()">
				<input
					x-model="customValue"
					@keydown.enter="addCustomValue()"
					placeholder="Type custom tag value and press Enter"
					class="px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 w-80"
				/>
			</template>
		</div>
		<div class="py-2">
			<template x-for="category in filterCategories" :key="category.name || 'default'">
				<template x-if="category.active">
					<div>
						<template x-for="item in category.items" :key="item.value">
							<div
								@click="addFilterFromCategory(item)"
								class="px-4 py-2 hover:bg-gray-50 cursor-pointer text-sm"
							>
								<span x-text="item.key === item.value ? item.value : item.key + ':' + item.value"></span>
							</div>
						</template>
					</div>
				</template>
			</template>
		</div>
	</div>
	<div
		x-show="showTagMatch"
		class="dropdown-container text-sm"
		x-cloak
	>
		<div class="py-2">
			<div
				@click="selectMatchedTag()"
				class="px-4 py-2 hover:bg-gray-50 cursor-pointer text-sm"
			>
				<span x-text="matchedTag ? matchedTag.key : ''"></span>
			</div>
		</div>
	</div>
}

templ operatorDropdown() {
	<div
		x-show="showOperatorDropdown"
		class="operator-dropdown text-sm"
		:style="`top: ${operatorDropdownPosition.top}px; left: ${operatorDropdownPosition.left}px;`"
		x-cloak
	>
		<div
			class="operator-option"
			:class="{'selected': tokens[activeTokenIndex]?.operator === 'is'}"
			@click="changeOperator(activeTokenIndex, 'is')"
		>
			<svg x-show="tokens[activeTokenIndex]?.operator === 'is'" class="h-5 w-5 mr-2 text-black" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
				<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
			</svg>
			<span x-show="tokens[activeTokenIndex]?.operator !== 'is'" class="h-5 w-5 mr-2"></span>
			<span>is</span>
		</div>
		<div
			class="operator-option"
			:class="{'selected': tokens[activeTokenIndex]?.operator === 'is not'}"
			@click="changeOperator(activeTokenIndex, 'is not')"
		>
			<svg x-show="tokens[activeTokenIndex]?.operator === 'is not'" class="h-5 w-5 mr-2 text-black" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
				<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
			</svg>
			<span x-show="tokens[activeTokenIndex]?.operator !== 'is not'" class="h-5 w-5 mr-2"></span>
			<span>is not</span>
		</div>
	</div>
}

templ issuesPagination(_ *warnly.ListIssuesResult) {
	<div class="p-4 border-t border-border flex items-center justify-between text-sm text-gray-600">
		<span x-text="getPaginationSummary()" class="font-medium"></span>
		<div class="flex gap-3">
			<button
				@click="paginatePrev()"
				:disabled="!canGoPrev()"
				class="px-4 py-2 cursor-pointer rounded-md border border-gray-300 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white transition-colors flex items-center gap-2"
			>
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
				</svg>
				<span class="font-medium">Previous</span>
			</button>
			<button
				@click="paginateNext()"
				:disabled="!canGoNext()"
				class="px-4 py-2 cursor-pointer rounded-md border border-gray-300 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white transition-colors flex items-center gap-2"
			>
				<span class="font-medium">Next</span>
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
				</svg>
			</button>
		</div>
	</div>
}

templ issuesTable(res *warnly.ListIssuesResult) {
	<div class="overflow-x-auto border border-border rounded-lg">
		<table class="w-full">
			<thead>
				<tr class="border-b border-border bg-gray-50">
					<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">ISSUE</th>
					<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">PROJECT</th>
					<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">EVENTS</th>
					<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">USERS</th>
					<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">FIRST SEEN</th>
					<th class="px-4 py-2 text-left text-sm font-medium text-gray-500">LAST SEEN</th>
				</tr>
			</thead>
			<tbody>
				for _, issue := range res.Issues {
					<tr class="border-b border-border hover:bg-gray-50">
						<td class="px-4 py-3">
							<a
								hx-get={ fmt.Sprintf("/projects/%d/issues/%d?period=14d", issue.ProjectID, issue.ID) }
								hx-target="#main-content"
								hx-swap="outerHTML settle:0"
								hx-push-url="true"
								class="cursor-pointer block"
							>
								<div class="flex items-center gap-2">
									<span class="text-sm font-medium text-gray-900">{ issue.Type }</span>
								</div>
								<div class="text-xs text-gray-500 mt-1">{ issue.Message }</div>
							</a>
						</td>
						<td class="px-4 py-3 text-sm text-gray-700">
							{ getProjectName(res.Projects, issue.ProjectID) }
						</td>
						<td class="px-4 py-3 text-sm text-gray-900 font-medium">
							{ warnly.NumFormatted(issue.TimesSeen) }
						</td>
						<td class="px-4 py-3 text-sm text-gray-900">
							{ warnly.NumFormatted(issue.UserCount) }
						</td>
						<td class="px-4 py-3 text-sm text-gray-500">
							{ warnly.TimeAgo(func() time.Time { return time.Now() }, issue.FirstSeen, false) }
						</td>
						<td class="px-4 py-3 text-sm text-gray-500">
							{ warnly.TimeAgo(func() time.Time { return time.Now() }, issue.LastSeen, false) }
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

// Helper functions
func getIssuesAlpineData(res *warnly.ListIssuesResult) string {
	period := "14d"
	if res.Request.Period != "" {
		period = res.Request.Period
	}

	filters := "[]"
	if res.Request.Query != "" {
		filters = "[]"
	}

	return fmt.Sprintf(`issueFilters({
		filters: %s,
		searchQuery: '%s',
		period: '%s',
		projectName: '%s',
		offset: %d,
		totalIssues: %d,
		tokens: %s
	})`, filters, res.Request.Query, period, res.RequestedProject, res.Request.Offset, res.TotalIssues, getSearchTokens(res.Request))
}

func getSelectedProjectName(requestedProject string) string {
	if requestedProject == "" {
		return "All Projects"
	}
	return requestedProject
}

func getPeriodOrDefault(period string) string {
	if period == "" {
		return "14d"
	}
	return period
}

func getSearchTokens(req *warnly.ListIssuesRequest) string {
	return "[]"
}

func getPopularTagsCategories(tags []warnly.TagCount) string {
	items := []map[string]string{}
	for _, t := range tags {
		items = append(items, map[string]string{
			"key":   t.Tag,
			"value": t.Tag,
		})
	}
	categories := []map[string]any{
		{
			"name":   "Tags",
			"active": true,
			"items":  items,
		},
	}

	jsonBytes, _ := json.Marshal(categories)

	return string(jsonBytes)
}

func getProjectName(projects []warnly.Project, projectID int) string {
	for _, p := range projects {
		if p.ID == projectID {
			return p.Name
		}
	}
	return "Unknown"
}
