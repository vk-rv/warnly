package web

import (
	"fmt"
	"github.com/vk-rv/warnly/internal/warnly"
	"sort"
	"strconv"
	"strings"
	"time"
)

templ GetIssue(issue *warnly.IssueDetails, user *warnly.User, source string) {
	<!DOCTYPE html>
	<html lang="en">
		@htmlHeader(IssueDetailsTitle)
		<body>
			@sidebar(sidebarProjects, user)
			@Toast()
			@GetIssueHtmx(issue, user, source)
		</body>
	</html>
}

templ GetIssueHtmx(issue *warnly.IssueDetails, user *warnly.User, source string) {
	<title>{ IssueDetailsTitle } - { AppName }</title>
	if source != "" {
		@GetIssueContent(issue, user)
	} else {
		<div id="main-content" x-data="{ activeTab: 'details' }" class="main-content">
			<div id="content" class="flex-grow bg-white p-4">
				<header class="border-b border-gray-200">
					<div class="px-4 py-2">
						<div class="flex items-center space-x-4">
							<nav class="flex items-center space-x-2">
								<span hx-target="#content" hx-swap="outerHTML settle:0" hx-push-url="true" hx-get={ fmt.Sprintf("/projects/%d?issues=all&period=14d", issue.ProjectID) } class="text-gray-600 text-sm cursor-pointer">Issues</span>
								<span class="flex items-center space-x-2">
									<svg data-testid="geist-icon" height="10" stroke-linejoin="round" style="color: currentcolor;" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" clip-rule="evenodd" d="M5.50001 1.93933L6.03034 2.46966L10.8536 7.29288C11.2441 7.68341 11.2441 8.31657 10.8536 8.7071L6.03034 13.5303L5.50001 14.0607L4.43935 13L4.96968 12.4697L9.43935 7.99999L4.96968 3.53032L4.43935 2.99999L5.50001 1.93933Z" fill="currentColor"></path></svg>
									<span class="font-medium text-sm">{ issue.ProjectName }</span>
								</span>
							</nav>
						</div>
					</div>
					<div class="px-4 py-2 mt-2 flex items-center justify-between">
						<div class="flex items-center space-x-4">
							<h1 class="text-lg font-semibold">{ issue.ErrorType }</h1>
							<span class="text-gray-600 truncate max-w-xs" title={ issue.View }>{ issue.View }</span>
							if issue.IsNew {
								<span class="px-2 py-1 bg-yellow-100 rounded text-sm">New</span>
							} else {
								<span class="px-2 py-1 bg-gray-100 rounded text-sm">Ongoing</span>
							}
						</div>
						<div class="flex items-center space-x-2 text-sm">
							<span class="text-gray-600">Errors</span>
							<a class="text-black-500 text-lg" href="#">{ warnly.NumFormatted(issue.TimesSeen) }</a>
						</div>
						<div class="flex items-center space-x-2 text-sm">
							<span class="text-gray-600">Users</span>
							<a class="text-black-500 text-lg" href="#">{ warnly.NumFormatted(issue.UserCount) }</a>
						</div>
						<div class="flex items-center space-x-2 text-sm"></div>
						<div class="flex items-center space-x-2"></div>
					</div>
					<div class="px-4 flex items-center space-x-2">
						<svg data-testid="geist-icon" height="16" stroke-linejoin="round" viewBox="0 0 16 16" width="16" style="color: currentcolor;"><path fill-rule="evenodd" clip-rule="evenodd" d="M14.5 8C14.5 11.5899 11.5899 14.5 8 14.5C4.41015 14.5 1.5 11.5899 1.5 8C1.5 4.41015 4.41015 1.5 8 1.5C11.5899 1.5 14.5 4.41015 14.5 8ZM16 8C16 12.4183 12.4183 16 8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0C12.4183 0 16 3.58172 16 8ZM10.5 5.5H5.5V10.5H10.5V5.5Z" fill="currentColor"></path></svg>
						<span>{ issue.ErrorValue }</span>
					</div>
					<div class="px-4 mt-4">
						<nav class="flex space-x-6 text-sm">
							<a id="issue_information" hx-swap="outerHTML settle:0" hx-target="#issue_content" hx-get={ fmt.Sprintf("/projects/%d/issues/%d?period=14d&source=issue&event_id=%s", issue.ProjectID, issue.IssueID, issue.Request.EventID) } :class="{ 'border-black text-black': activeTab === 'details', 'border-transparent text-gray-500 cursor-pointer': activeTab !== 'details' }" @click="activeTab = 'details'" class="px-3 py-2 border-b-2">Info</a>
							<a hx-swap="outerHTML settle:0" hx-target="#issue_content" hx-get={ fmt.Sprintf("/projects/%d/issues/%d/discussions", issue.ProjectID, issue.IssueID) } :class="{ 'border-black text-black': activeTab === 'activity', 'border-transparent text-gray-500 cursor-pointer': activeTab !== 'activity' }" @click="activeTab = 'activity'" class="px-3 py-2 text-gray-600 border-b-2">Discuss <span id="message_cnt" class="text-gray-400">{ fmt.Sprintf("%d", issue.MessagesCount) }</span></a>
							<a hx-swap="outerHTML settle:0" hx-target="#issue_content" hx-get={ fmt.Sprintf("/projects/%d/issues/%d/fields", issue.ProjectID, issue.IssueID) } :class="{ 'border-black text-black': activeTab === 'tags', 'border-transparent text-gray-500 cursor-pointer': activeTab !== 'tags' }" @click="activeTab = 'tags'" class="px-3 py-2 text-gray-600 border-b-2">Fields</a>
							<a hx-swap="outerHTML settle:0" hx-target="#issue_content" hx-get={ fmt.Sprintf("/projects/%d/issues/%d/events", issue.ProjectID, issue.IssueID) } :class="{ 'border-black text-black': activeTab === 'all', 'border-transparent text-gray-500 cursor-pointer': activeTab !== 'all' }" @click="activeTab = 'all'" class="px-3 py-2 text-gray-600 border-b-2">All Errors</a>
						</nav>
					</div>
				</header>
				@GetIssueContent(issue, user)
			</div>
		</div>
	}
}

templ GetIssueContent(issue *warnly.IssueDetails, user *warnly.User) {
	if issue.Request.EventID != "" && issue.Request.Source == warnly.GetIssueRequestSourceIssue {
		<a hx-swap-oob="true" id="issue_information" hx-swap="outerHTML settle:0" hx-target="#issue_content" hx-get={ fmt.Sprintf("/projects/%d/issues/%d?period=14d&source=issue&event_id=%s", issue.ProjectID, issue.IssueID, issue.Request.EventID) } :class="{ 'border-black text-black': activeTab === 'details', 'border-transparent text-gray-500 cursor-pointer': activeTab !== 'details' }" @click="activeTab = 'details'" class="px-3 py-2 border-b-2">Info</a>
	}
	@Toast()
	<div id="issue_content" class="flex" x-data={ "{ copyToClipboard(text) { navigator.clipboard.writeText(text); showToast('Copied to clipboard'); } }" }>
		<main class="flex-1 p-6">
			<div class="flex items-center justify-between mb-6">
				<div class="flex items-center space-x-1">
					<span class="font-semibold">ID:</span>
					<span class="text-gray-600 cursor-pointer" title={ issue.EventID() } @click={ fmt.Sprintf("copyToClipboard('%s')", issue.EventID()) }>{ issue.EventID()[:6] }</span>
					<svg data-testid="geist-icon" height="16" stroke-linejoin="round" viewBox="0 0 24 24" width="16" style="color: currentcolor;" class="cursor-pointer" @click={ fmt.Sprintf("copyToClipboard('%s')", issue.EventID()) }>
						<path fill-rule="evenodd" clip-rule="evenodd" d="M8 2H16C17.1 2 18 2.9 18 4V6H16V4H8V6H6V4C6 2.9 6.9 2 8 2ZM6 8H18C19.1 8 20 8.9 20 10V20C20 21.1 19.1 22 18 22H6C4.9 22 4 21.1 4 20V10C4 8.9 4.9 8 6 8ZM6 10V20H18V10H6Z" fill="currentColor"></path>
					</svg>
				</div>
			</div>
			if issue.LastEvent.UserID != "" {
				<div class="bg-white rounded-lg mb-6">
					<h2 class="text-sm font-medium text-gray-700 mb-2">User Info</h2>
					<div class="flex items-center space-x-4">
						<div class="flex flex-col">
							<span class="text-xs text-gray-500">Identifier</span>
							<span class="font-mono text-sm text-gray-800">{ issue.LastEvent.UserID }</span>
						</div>
						if issue.LastEvent.UserName != "" {
							<div class="flex flex-col">
								<span class="text-xs text-gray-500">Name</span>
								<span class="font-mono text-sm text-gray-800">{ issue.LastEvent.UserName }</span>
							</div>
						}
						if issue.LastEvent.UserUsername != "" {
							<div class="flex flex-col">
								<span class="text-xs text-gray-500">Username</span>
								<span class="font-mono text-sm text-gray-800">{ issue.LastEvent.UserUsername }</span>
							</div>
						}
						if issue.LastEvent.UserEmail != "" {
							<div class="flex flex-col">
								<span class="text-xs text-gray-500">Email</span>
								<span class="font-mono text-sm text-gray-800">{ issue.LastEvent.UserEmail }</span>
							</div>
						}
					</div>
				</div>
			}
			<div class="bg-gray-50 border-l-4 border-blue-500 rounded-lg p-4 mb-6">
				<div class="flex items-center gap-2 mb-2">
					<svg class="w-4 h-4 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
						<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
					</svg>
					<h2 class="text-sm font-semibold text-gray-900">Log Message</h2>
				</div>
				<div class="font-mono text-sm text-gray-800">
					{ issue.Message }
				</div>
			</div>
			<div class="space-y-2 mt-6">
				<div class="flex items-center gap-2">
					<h2 class="text-sm font-medium text-gray-700 mb-2">Fields</h2>
				</div>
			</div>
			<div class="max-w-4xl mx-auto mb-6">
				<div class="grid grid-cols-3 gap-2">
					for i, kv := range issue.TagKeyValue() {
						if i % 2 == 0 {
							<div x-data="{ open: false }" class="relative rounded p-2 bg-white hover:bg-gray-100 cursor-pointer" @click="open = !open">
								<div class="text-xs text-gray-500 mb-1 truncate" title={ kv.Key }>{ kv.Key }</div>
								<div class="font-mono text-xs text-gray-900 truncate" title={ kv.Value }>{ kv.Value }</div>
								<div x-show="open" @click.away="open = false" @click.stop class="absolute left-0 mt-2 w-48 bg-white border border-gray-200 rounded shadow-lg z-50 text-xs">
									<a hx-get={ fmt.Sprintf("/?project_name=%s&issues=all&period=14d&query=%s:%s", issue.ProjectName, kv.Key, kv.Value) } hx-target="#content" hx-swap="outerHTML settle:0" hx-push-url="true" class="block px-3 py-1.5 text-gray-700 hover:bg-gray-100">Search issues</a>
									<a href="#" @click.prevent={ fmt.Sprintf("copyToClipboard(%q); $nextTick(() => open = false)", kv.Value) } class="block px-3 py-1.5 text-gray-700 hover:bg-gray-100">Copy to clipboard</a>
								</div>
							</div>
						} else {
							<div x-data="{ open: false }" class="relative rounded p-2 bg-gray-50 hover:bg-gray-100 cursor-pointer" @click="open = !open">
								<div class="text-xs text-gray-500 mb-1 truncate" title={ kv.Key }>{ kv.Key }</div>
								<div class="font-mono text-xs text-gray-900 truncate" title={ kv.Value }>{ kv.Value }</div>
								<div x-show="open" @click.away="open = false" @click.stop class="absolute left-0 mt-2 w-48 bg-white border border-gray-200 rounded shadow-lg z-50 text-xs">
									<a hx-get={ fmt.Sprintf("/?project_name=%s&issues=all&period=14d&query=%s:%s", issue.ProjectName, kv.Key, kv.Value) } hx-target="#content" hx-swap="outerHTML settle:0" hx-push-url="true" class="block px-3 py-1.5 text-gray-700 hover:bg-gray-100">Search issues</a>
									<a href="#" @click.prevent={ fmt.Sprintf("copyToClipboard(%q); $nextTick(() => open = false)", kv.Value) } class="block px-3 py-1.5 text-gray-700 hover:bg-gray-100">Copy to clipboard</a>
								</div>
							</div>
						}
					}
				</div>
			</div>
			<div class="space-y-2 mt-6">
				<div class="flex items-center gap-2">
					<h2 class="text-sm font-medium text-gray-700 mb-2">Contexts</h2>
				</div>
			</div>
			<div class="max-w-4xl mx-auto mb-6">
				<div class="grid grid-cols-2 gap-4">
					for _, kv := range sortedGroupContexts(issue.Contexts()) {
						<div class="border border-gray-200 rounded-lg p-4 bg-white">
							<div class="flex items-center justify-between mb-3">
								<h3 class="text-sm font-semibold text-gray-900">{ strings.Title(kv.Prefix) }</h3>
								if kv.Prefix == "os" {
									if kv.Fields["name"] == "darwin" {
										<svg class="w-4 h-4" viewBox="0 0 16 16" fill="currentColor">
											<path d="M11.182.008C11.148-.03 9.923.023 8.857 1.18c-1.066 1.156-.902 2.482-.878 2.516.024.034 1.52.087 2.475-1.258.955-1.345.762-2.391.728-2.43zm3.314 11.733c-.048-.096-2.325-1.234-2.113-3.422.212-2.189 1.675-2.789 1.698-2.854.023-.065-.597-.79-1.254-1.157a3.692 3.692 0 0 0-1.563-.434c-.108-.003-.483-.095-1.254.116-.508.139-1.653.589-1.968.607-.316.018-1.256-.522-2.267-.665-.647-.125-1.333.131-1.824.328-.49.196-1.422.754-2.074 2.237-.652 1.482-.311 3.83-.067 4.56.244.729.625 1.924 1.273 2.796.576.984 1.34 1.667 1.659 1.899.319.232 1.219.386 1.843.067.502-.308 1.408-.485 1.766-.472.357.013 1.061.154 1.782.539.571.197 1.111.115 1.652-.105.541-.221 1.324-1.059 2.238-2.758.347-.79.505-1.217.473-1.282z"></path>
										</svg>
									} else {
										<!-- Default OS icon -->
										<svg class="w-4 h-4" viewBox="0 0 16 16" fill="currentColor">
											<path d="M8 0C3.58 0 0 3.58 0 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6z"></path>
											<path d="M8 4c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path>
											<path d="M8 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path>
										</svg>
									}
								} else if kv.Prefix == "user" {
									<svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"></path>
									</svg>
								}
							</div>
							<div class="space-y-2 text-xs">
								for _, key := range sortedKeys(kv.Fields) {
									<div class="flex justify-between">
										<span class="text-gray-500">{ key }</span>
										<span class="font-mono text-gray-900">{ kv.Fields[key] }</span>
									</div>
								}
							</div>
						</div>
					}
				</div>
			</div>
			<div class="space-y-2 mt-6">
				<div class="flex items-center gap-2">
					<h2 class="text-sm font-medium text-gray-700 mb-2">Additional Data</h2>
				</div>
			</div>
			<div class="max-w-4xl mx-auto mb-6">
				<div class="bg-white border border-gray-200 rounded-lg p-4">
					<div class="space-y-2 text-xs">
						<div class="flex justify-between">
							<span class="text-gray-500">auth</span>
							<span class="font-mono text-gray-900">"[Filtered]"</span>
						</div>
						<div class="flex justify-between">
							<span class="text-gray-500">int</span>
							<span class="font-mono text-gray-900">1</span>
						</div>
						<div class="flex justify-between">
							<span class="text-gray-500">ints</span>
							<span class="font-mono text-gray-900">[1,2,3]</span>
						</div>
						<div class="flex justify-between">
							<span class="text-gray-500">is_auth</span>
							<span class="font-mono text-gray-900">true</span>
						</div>
						<div class="flex justify-between">
							<span class="text-gray-500">s</span>
							<span class="font-mono text-gray-900" style="white-space: pre;">
								@templ.Raw(`{"a": 1,\n  "b": "s"}`)
							</span>
						</div>
					</div>
				</div>
			</div>
			if issue.HasStackDetails() {
				<div x-data="{ showAll: false }" class="bg-white rounded-lg">
					<div class="max-w-5xl mx-auto bg-white rounded-lg shadow-sm border border-gray-200">
						<div class="p-1 border-b border-gray-100 flex items-center gap-4">
							<div class="bg-black text-white rounded p-2 shrink-0">
								<span class="font-mono">{ issue.GetPlatform() }</span>
							</div>
							<div class="flex-1 text-gray-600">
								<div class="text-xs">
									Noticed in<span class="font-mono">: { issue.StackDetails[0].Filepath }</span> in <span class="font-mono">{ issue.StackDetails[0].FunctionName }</span>
								</div>
							</div>
						</div>
						<div class="divide-y divide-gray-100">
							for _, f := range issue.StackVisible() {
								<div class="p-4 hover:bg-gray-50 flex items-center justify-between">
									<div class="flex-1">
										<div class="text-xs">
											<span class="font-mono text-gray-700">{ f.Filepath }</span>
											<span class="text-gray-500">in</span>
											<span class="text-gray-600">{ f.FunctionName }</span>
											<span class="text-gray-500">at line</span>
											<span class="text-gray-700">{ strconv.Itoa(f.LineNo) }</span>
										</div>
									</div>
									<span class="px-2 py-1 rounded text-xs bg-blue-50 text-blue-600">{ f.InAppStr() }</span>
								</div>
							}
							<div x-show="showAll">
								for _, f := range issue.StackHidden() {
									<div class="p-4 hover:bg-gray-50 flex items-center justify-between">
										<div class="flex-1">
											<div class="text-xs">
												<span class="font-mono text-gray-700">{ f.Filepath }</span>
												<span class="text-gray-500">in</span>
												<span class="text-gray-600">{ f.FunctionName }</span>
												<span class="text-gray-500">at line</span>
												<span class="text-gray-700">{ strconv.Itoa(f.LineNo) }</span>
											</div>
										</div>
										<span class="px-2 py-1 rounded text-xs bg-blue-50 text-blue-600">{ f.InAppStr() }</span>
									</div>
								}
							</div>
							<div class="p-4 text-center">
								<button @click="showAll = !showAll" class="text-sm cursor-pointer text-blue-600 hover:text-blue-700">
									<span x-show="!showAll">Show more</span>
									<span x-show="showAll">Show less</span>
								</button>
							</div>
						</div>
					</div>
				</div>
			}
		</main>
		<aside class="w-80 border-l border-gray-200 p-6">
			<div class="space-y-6">
				<div>
					<h3 class="text-sm font-medium text-gray-600 mb-2">Assigned To</h3>
					<div x-data={ teammateSelect(issue) }>
						<button
							@click="open = !open"
							class="inline-flex items-center p-2.5 mr-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 cursor-pointer"
						>
							<span x-text="selected"></span>
							<svg class="ml-2 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
							</svg>
						</button>
						<div x-show="open" @click.away="open = false" class="absolute mt-2 w-48 rounded-md bg-white shadow-lg z-10">
							<ul class="py-1 text-sm text-gray-700">
								<li x-show="selected !== 'Unassigned'">
									<a
										href="#"
										@click.prevent={ unassignClickPrevent(issue.ProjectID, issue.IssueID) }
										class="block px-4 py-2 hover:bg-gray-100 text-red-600"
									>
										Unassign
									</a>
								</li>
								for _, teammate := range issue.Teammates {
									if assigned, ok := issue.Assignments.AssignedUser(issue.IssueID); ok && assigned.ID == teammate.ID {
										<li>
											<a
												href="#"
												@click.prevent={ teammateClickPrevent(teammate.Username, teammate.ID, issue.ProjectID, issue.IssueID) }
												class="block px-4 py-2 hover:bg-gray-100 flex items-center justify-between"
											>
												<span>{ teammate.Name }</span>
											</a>
										</li>
									} else {
										<li>
											<a
												href="#"
												@click.prevent={ teammateClickPrevent(teammate.Username, teammate.ID, issue.ProjectID, issue.IssueID) }
												class="block px-4 py-2 hover:bg-gray-100"
											>
												{ teammate.Name }
											</a>
										</li>
									}
								}
							</ul>
						</div>
					</div>
				</div>
				<div>
					<h3 class="text-sm font-medium text-gray-600 mb-2">Last 24 Hours</h3>
					<div class="text-2xl font-semibold">{ warnly.NumFormatted(issue.Total24Hours) }</div>
				</div>
				<div>
					<h3 class="text-sm font-medium text-gray-600 mb-2">Last 30 Days</h3>
					<div class="text-2xl font-semibold">{ warnly.NumFormatted(issue.Total30Days) }</div>
				</div>
				<div>
					<h3 class="text-sm font-medium text-gray-600 mb-2">Last Noticed</h3>
					<div class="">{ warnly.TimeAgo(time.Now, issue.LastSeen, /* narrow */ false) } ago</div>
				</div>
				<div>
					<h3 class="text-sm font-medium text-gray-600 mb-2">First Noticed</h3>
					<div class="">{ warnly.TimeAgo(time.Now, issue.FirstSeen, /* narrow */ false) } ago</div>
				</div>
				<div class="">
					<div class="flex items-center justify-between mb-6">
						<div class="flex items-center gap-2">
							<h2 class="text-lg font-semibold text-gray-900">Fields</h2>
						</div>
					</div>
					for _, tc := range issue.TagCount {
						<div x-data="{ open: false }" class="mb-6">
							<div class="flex items-center justify-between mb-2">
								<h3 class="text-sm font-medium text-gray-700">{ tc.Tag }</h3>
								<div class="flex items-center gap-2 cursor-pointer" @click="open = !open">
									<span class="text-sm text-gray-500 truncate max-w-xs" title={ issue.Tag(tc.Tag) }>{ warnly.Cut(issue.Tag(tc.Tag), 13) }</span>
									<svg :class="{ 'rotate-180': open }" class="w-4 h-4 text-gray-400 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-width="2" d="M19 9l-7 7-7-7"></path>
									</svg>
								</div>
							</div>
							<div x-show="open" class="bg-gray-100 rounded-full h-2 mb-2">
								<div class={ fmt.Sprintf("bg-gray-300 h-2 rounded-full %s", issue.ProgressLen(issue.Tag(tc.Tag))) }></div>
							</div>
							for _, t := range issue.ListTagValues(tc.Tag) {
								<div x-show="open" class="flex items-center gap-2 pl-1">
									<span class="w-2 h-2 bg-blue-600 rounded-full"></span>
									<span class="text-sm truncate text-gray-600">{ t.Value }</span>
									<span class="text-sm text-gray-400 ml-auto">{ t.PercentsFormatted() }%</span>
								</div>
							}
						</div>
					}
				</div>
			</div>
		</aside>
	</div>
}

func teammateSelect(issue *warnly.IssueDetails) string {
	username := "Unassigned"
	userID := int64(0)
	for _, teammate := range issue.Teammates {
		if assigned, ok := issue.Assignments.AssignedUser(issue.IssueID); ok && assigned.ID == teammate.ID {
			username = teammate.Username
			userID = teammate.ID
			break
		}
	}
	return fmt.Sprintf("{ open: false, selected: '%s', user_id: %d }", username, userID)
}

func teammateClickPrevent(username string, userID int64, projectID int, issueID int64) string {
	return fmt.Sprintf(
		"selected = '%s'; user_id = %d; open = false; htmx.ajax('POST', '/projects/%d/issues/%d/assignments', { values: { user_id: %d } })",
		username,
		userID,
		projectID,
		issueID,
		userID)
}

func unassignClickPrevent(projectID int, issueID int64) string {
	return fmt.Sprintf(
		"selected = 'Unassigned'; open = false; htmx.ajax('DELETE', '/projects/%d/issues/%d/assignments', { headers: { } })",
		projectID,
		issueID)
}

func groupContexts(contexts map[string]string) map[string]map[string]string {
	groups := make(map[string]map[string]string)
	for k, v := range contexts {
		parts := strings.SplitN(k, ".", 2)
		if len(parts) == 2 {
			prefix := parts[0]
			key := parts[1]
			if groups[prefix] == nil {
				groups[prefix] = make(map[string]string)
			}
			groups[prefix][key] = v
		}
	}
	return groups
}

type contextGroup struct {
	Prefix string
	Fields map[string]string
}

func sortedGroupContexts(contexts map[string]string) []contextGroup {
	grouped := groupContexts(contexts)
	keys := make([]string, 0, len(grouped))
	for k := range grouped {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	result := make([]contextGroup, 0, len(keys))
	for _, k := range keys {
		result = append(result, contextGroup{
			Prefix: k,
			Fields: grouped[k],
		})
	}
	return result
}

func sortedKeys(m map[string]string) []string {
	keys := make([]string, 0, len(m))
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)
	return keys
}
