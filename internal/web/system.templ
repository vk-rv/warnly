package web

import (
	"fmt"
	"github.com/vk-rv/warnly/internal/warnly"
	"strings"
)

func queriesTable(queries []warnly.SQLQuery) string {
	var queryData []string
	for _, query := range queries {
		queryData = append(queryData, fmt.Sprintf(`{
            id: %s,
            sql: '%s',
            avgDuration: %.2f,
            avgDurationDisplay: '%.2f',
            rowsScanned: %.2f,
            rowsScannedDisplay: '%.2f',
            callsPerMinute: %.2f,
            callsPerMinuteDisplay: '%.2f',
            progress: %.0f,
            totalReadBytes: '%s',
            totalReadBytesNumeric: %.0f,
            percentageIOPS: %.2f,
            percentageIOPSDisplay: '%.2f',
            percentageRuntime: %.2f,
            percentageRuntimeDisplay: '%.2f',
            totalCalls: %d,
            totalCallsDisplay: '%d'
        }`,
			query.NormalizedQueryHash,
			query.NormalizedQuery,
			query.AvgDuration,
			query.AvgDuration,
			query.AvgResultRows,
			query.AvgResultRows,
			query.CallsPerMinute,
			query.CallsPerMinute,
			query.Percent,
			query.TotalReadBytes,
			query.TotalReadBytesNumeric,
			query.PercentageIOPS,
			query.PercentageIOPS,
			query.PercentageRuntime,
			query.PercentageRuntime,
			query.TotalCalls,
			query.TotalCalls))
	}
	return fmt.Sprintf(`{
        queries: [%s],
        sortedQueries: [],
        activeTooltip: null,
        sortField: 'totalReadBytesNumeric',
        sortDirection: 'desc',
        
        init() {
            this.sortedQueries = [...this.queries];
            this.sortQueries();
        },
        
        copyToClipboard(text) {
            navigator.clipboard.writeText(text);
			showToast('Copied to clipboard');
			this.activeTooltip = null;
        },
        
        formatSql(sql) {
            const maxLength = 100;
            if (sql.length > maxLength) {
                sql = sql.substring(0, maxLength) + '...';
            }
            return sql.split(' ').map(word => {
                if (['SELECT', 'AS', 'FROM'].includes(word.toUpperCase())) {
                    return`+"`<span class='text-black font-semibold'>${word}</span>`;"+
		`}
                return word;
            }).join(' ');
        },
        
        toggleTooltip(id) {
            if (this.activeTooltip === id) {
                this.activeTooltip = null;
            } else {
                this.activeTooltip = id;
            }
        },
        
        sortBy(field) {
            if (this.sortField === field) {
                this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                this.sortField = field;
                this.sortDirection = 'asc';
            }
            this.sortQueries();
        },
        
        sortQueries() {
            this.sortedQueries = [...this.queries].sort((a, b) => {
                let aVal = a[this.sortField];
                let bVal = b[this.sortField];
                
                if (this.sortField === 'sql') {
                    aVal = aVal.toLowerCase();
                    bVal = bVal.toLowerCase();
                }
                
                if (aVal < bVal) {
                    return this.sortDirection === 'asc' ? -1 : 1;
                }
                if (aVal > bVal) {
                    return this.sortDirection === 'asc' ? 1 : -1;
                }
                return 0;
            });
        },
        
        getSortIcon(field) {
            if (this.sortField !== field) {
                return '<svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4"></path></svg>';
            }
            if (this.sortDirection === 'asc') {
                return '<svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path></svg>';
            } else {
                return '<svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>';
            }
        }
    }`, strings.Join(queryData, ","))
}

templ System(queries []warnly.SQLQuery, isPartial bool, user *warnly.User) {
	@Layout(QueriesTitle, SystemHtmx(queries, isPartial), sidebarSystem, user)
}

templ SystemHtmx(queries []warnly.SQLQuery, _ bool) {
	<title>{ QueriesTitle } - { AppName } </title>
	<div id="content" class="flex min-h-screen pb-6">
		@Toast()
		<div class="flex-1 overflow-x-auto">
			<div class="bg-white shadow">
				@systemNavigation(systemNavigationQueries)
				<div id="content-section">
					<div class="">
						<div class="container mx-auto p-4" x-data={ queriesTable(queries) } @click.away="activeTooltip = null">
							<table class="w-full bg-white border-collapse">
								<thead>
									<tr class="text-left text-[13px]">
										<th class="py-2 px-4 font-semibold">
											<button class="flex items-center space-x-1 hover:text-blue-600 w-full text-left">
												<span>QUERY</span>
											</button>
										</th>
										<th class="py-2 px-4 font-semibold text-center">
											<button @click="sortBy('avgDuration')" class="flex cursor-pointer items-center space-x-1 hover:text-blue-600 w-full justify-center">
												<span>AVG DURATION (MS)</span>
												<span x-html="getSortIcon('avgDuration')"></span>
											</button>
										</th>
										<th class="py-2 px-4 font-semibold text-center">
											<button @click="sortBy('rowsScanned')" class="flex cursor-pointer items-center space-x-1 hover:text-blue-600 w-full justify-center">
												<span>AVG RESULT ROWS</span>
												<span x-html="getSortIcon('rowsScanned')"></span>
											</button>
										</th>
										<th class="py-2 px-4 font-semibold text-center">
											<button @click="sortBy('callsPerMinute')" class="flex cursor-pointer items-center space-x-1 hover:text-blue-600 w-full justify-center">
												<span>CALLS/MINUTE</span>
												<span x-html="getSortIcon('callsPerMinute')"></span>
											</button>
										</th>
										<th class="py-2 px-4 font-semibold text-center">
											<button @click="sortBy('totalCalls')" class="flex cursor-pointer items-center space-x-1 hover:text-blue-600 w-full justify-center">
												<span>TOTAL CALLS</span>
												<span x-html="getSortIcon('totalCalls')"></span>
											</button>
										</th>
										<th class="py-2 px-4 font-semibold text-center">
											<button @click="sortBy('totalReadBytesNumeric')" class="flex cursor-pointer items-center space-x-1 hover:text-blue-600 w-full justify-center">
												<span>TOTAL READ BYTES</span>
												<span x-html="getSortIcon('totalReadBytesNumeric')"></span>
											</button>
										</th>
										<th class="py-2 px-4 font-semibold text-center">
											<button @click="sortBy('percentageIOPS')" class="flex cursor-pointer items-center space-x-1 hover:text-blue-600 w-full justify-center">
												<span>% IOPS</span>
												<span x-html="getSortIcon('percentageIOPS')"></span>
											</button>
										</th>
										<th class="py-2 px-4 font-semibold text-center">
											<button @click="sortBy('percentageRuntime')" class="flex cursor-pointer items-center space-x-1 hover:text-blue-600 w-full justify-center">
												<span>% RUNTIME</span>
												<span x-html="getSortIcon('percentageRuntime')"></span>
											</button>
										</th>
										<th class="py-2 px-4 w-8"></th>
									</tr>
								</thead>
								<tbody class="text-[13px]">
									<template x-for="query in sortedQueries" :key="query.id">
										<tr class="border-t border-gray-200 hover:bg-gray-50">
											<td class="py-2 px-4 font-mono text-[13px]">
												<div class="flex items-center space-x-2">
													<div class="relative">
														<span @click.stop="toggleTooltip(query.id)" class="cursor-pointer" x-html="formatSql(query.sql)"></span>
														<div
															x-show="activeTooltip === query.id"
															x-transition:enter="transition ease-out duration-200"
															x-transition:enter-start="opacity-0 transform scale-95"
															x-transition:enter-end="opacity-100 transform scale-100"
															x-transition:leave="transition ease-in duration-150"
															x-transition:leave-start="opacity-100 transform scale-100"
															x-transition:leave-end="opacity-0 transform scale-95"
															class="absolute z-10 w-96 p-4 mt-2 bg-white rounded shadow-lg"
															@click.stop
														>
															<pre class="text-xs whitespace-pre-wrap" x-text="query.sql"></pre>
															<button
																@click.stop="copyToClipboard(query.sql)"
																class="absolute top-2 cursor-pointer right-2 text-gray-500 hover:text-gray-700"
															>
																<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
																</svg>
															</button>
														</div>
													</div>
												</div>
											</td>
											<td class="py-2 px-4 text-center" x-text="query.avgDurationDisplay"></td>
											<td class="py-2 px-4 text-center" x-text="query.rowsScannedDisplay"></td>
											<td class="py-2 px-4 text-center" x-text="query.callsPerMinuteDisplay"></td>
											<td class="py-2 px-4 text-center" x-text="query.totalCallsDisplay"></td>
											<td class="py-2 px-4 text-center">
												<div class="flex flex-col items-center space-y-1">
													<span x-text="query.totalReadBytes"></span>
													<div class="w-20 h-2 bg-gray-100 rounded-full overflow-hidden">
														<div class="h-full bg-gray-300 rounded-full" :style="`width: ${query.progress}%`"></div>
													</div>
												</div>
											</td>
											<td class="py-2 px-4 text-center" x-text="query.percentageIOPSDisplay"></td>
											<td class="py-2 px-4 text-center" x-text="query.percentageRuntimeDisplay"></td>
										</tr>
									</template>
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}
