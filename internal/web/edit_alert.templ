package web

import (
	"fmt"
	"github.com/vk-rv/warnly/internal/warnly"
)

templ EditAlert(user *warnly.User, projects []warnly.Project, alert *warnly.Alert) {
	@Layout("Edit Alert", EditAlertHtmx(user, projects, alert), sidebarAlerts, user)
}

templ EditAlertHtmx(user *warnly.User, projects []warnly.Project, alert *warnly.Alert) {
	<title>Edit Alert - { AppName }</title>
	<div id="content" class="flex-grow overflow-y-auto h-screen">
		@EditAlertContent(user, projects, alert)
	</div>
}

templ EditAlertContent(user *warnly.User, projects []warnly.Project, alert *warnly.Alert) {
	<div class="max-w-7xl mx-auto p-6" x-data={ fmt.Sprintf("alertForm(%d, %d, %d, %d, %t, '%s')", alert.ProjectID, alert.Threshold, alert.Condition, alert.Timeframe, alert.HighPriority, alert.RuleName) }>
		@Toast()
		<!-- Breadcrumbs -->
		<nav class="mb-6 border-b border-gray-200">
			<div class="flex items-center gap-2 text-sm text-gray-600">
				<a href="/alerts" hx-get="/alerts" hx-target="#content" hx-swap="outerHTML settle:0" hx-push-url="true" class="hover:text-gray-900">Alerts</a>
				<span>â€º</span>
				<span class="text-gray-900">Edit Alert</span>
			</div>
		</nav>
		<!-- Main Content -->
		<main class="max-w-4xl">
			<h1 class="text-2xl font-bold mb-8">Edit Alert</h1>
			<!-- Step 1: Select Project -->
			<section class="mb-8">
				<h2 class="text-lg font-semibold flex items-center gap-2 mb-4">
					<span class="flex items-center justify-center w-6 h-6 bg-black text-white text-sm rounded">1</span>
					Select Project
				</h2>
				<div class="relative">
					<select
						x-model.number="projectId"
						class="w-full px-4 py-3 border border-gray-300 rounded-lg appearance-none bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
					>
						<option value="0">Select Project</option>
						for _, project := range projects {
							<option value={ fmt.Sprintf("%d", project.ID) }>{ project.Name }</option>
						}
					</select>
					<div class="absolute right-4 top-1/2 -translate-y-1/2 pointer-events-none">
						<svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
						</svg>
					</div>
				</div>
			</section>
			<!-- Step 2: Configure Alert Conditions -->
			<section class="mb-8">
				<h2 class="text-lg font-semibold flex items-center gap-2 mb-6">
					<span class="flex items-center justify-center w-6 h-6 bg-black text-white text-sm rounded">2</span>
					Configure Alert Conditions
				</h2>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					<div>
						<label class="block text-sm font-medium text-gray-700 mb-2">Threshold</label>
						<input
							x-model.number="threshold"
							type="number"
							min="1"
							class="w-full px-3 py-2 bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
							placeholder="10"
						/>
						<p class="mt-1 text-xs text-gray-500">Number of occurrences or users</p>
					</div>
					<div>
						<label class="block text-sm font-medium text-gray-700 mb-2">Condition</label>
						<select
							x-model.number="condition"
							class="w-full px-3 py-2.5 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
						>
							<option value="1">Occurrences of a unique error</option>
							<option value="2">Users affected by a unique error</option>
						</select>
					</div>
					<div>
						<label class="block text-sm font-medium text-gray-700 mb-2">Time Window</label>
						<select
							x-model.number="timeframe"
							class="w-full px-3 py-2 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
						>
							<option value="1">1 minute</option>
							<option value="2">5 minutes</option>
							<option value="3">15 minutes</option>
							<option value="4">1 hour</option>
							<option value="5">1 day</option>
							<option value="6">1 week</option>
							<option value="7">30 days</option>
						</select>
					</div>
				</div>
			</section>
			<!-- Step 3: Name the Alert -->
			<section class="mb-8">
				<h2 class="text-lg font-semibold flex items-center gap-2 mb-4">
					<span class="flex items-center justify-center w-6 h-6 bg-black text-white text-sm rounded">3</span>
					Name the Alert
				</h2>
				<input
					x-model="ruleName"
					type="text"
					class="w-full px-4 py-3 border border-gray-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
					placeholder="e.g., High Error Rate Alert"
				/>
			</section>
			<div class="flex items-center pt-7">
				<input
					x-model="highPriority"
					type="checkbox"
					id="high-priority"
					class="h-4 w-4 text-black border-gray-300 rounded focus:ring-black"
				/>
				<label for="high-priority" class="ml-2 text-sm text-gray-700">Mark as high priority</label>
			</div>
			<!-- Action Buttons -->
			<div class="flex justify-end gap-3 pt-8 pb-8">
				<button
					hx-get="/alerts"
					hx-target="#content"
					hx-swap="outerHTML settle:0"
					hx-push-url="true"
					class="px-4 py-2 border border-gray-300 rounded text-sm font-medium text-gray-700 hover:bg-gray-50 cursor-pointer"
				>
					Cancel
				</button>
				<button
					@click={ fmt.Sprintf("updateAlert(%d)", alert.ID) }
					:disabled="!isFormValid"
					:class="isFormValid ? 'bg-black text-white hover:bg-gray-800' : 'bg-gray-300 text-gray-500 cursor-not-allowed'"
					class="px-4 py-2 rounded text-sm font-medium transition cursor-pointer"
				>
					Update Alert
				</button>
			</div>
		</main>
	</div>
	<script>
		function alertForm(projectId, threshold, condition, timeframe, highPriority, ruleName) {
			return {
				projectId: projectId || 0,
				threshold: threshold || 10,
				condition: condition || 1,
				timeframe: timeframe || 4,
				highPriority: highPriority || false,
				ruleName: ruleName || '',

				get isFormValid() {
					return this.projectId > 0 && this.ruleName.trim() !== '' && this.threshold > 0;
				},

				updateAlert(alertId) {
					if (!this.isFormValid) return;

					htmx.ajax('PUT', `/alerts/${alertId}`, {
						target: '#content',
						swap: 'outerHTML',
						values: {
							rule_name: this.ruleName,
							threshold: this.threshold,
							condition: this.condition,
							timeframe: this.timeframe,
							high_priority: this.highPriority
						}
					});
				}
			};
		}
	</script>
}
