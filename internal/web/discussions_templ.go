// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package web

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/vk-rv/warnly/internal/warnly"
	"regexp"
	"strings"
	"time"
)

var mentionRegex = regexp.MustCompile(`@(\w+)`)

func Discussion(discussion *warnly.Discussion) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"issue_content\" class=\"max-w-3xl w-2/3 mt-6\" x-data=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(discussionState(discussion))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/discussions.templ`, Line: 14, Col: 90}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\"><div class=\"bg-white rounded-lg border border-gray-200 mb-4\"><div class=\"border-b border-gray-200\"><div class=\"flex\"><button @click=\"activeTab = 'write'\" :class=\"{'border-vercel-purple text-vercel-purple border-b-2': activeTab === 'write'}\" class=\"px-4 py-2 text-sm cursor-pointer font-medium\">Write</button> <button @click=\"activeTab = 'preview'\" :class=\"{'border-vercel-purple text-vercel-purple border-b-2': activeTab === 'preview'}\" class=\"px-4 py-2 text-sm cursor-pointer font-medium\">Preview</button></div></div><div class=\"p-4\"><div x-show=\"activeTab === 'write'\" class=\"relative\"><textarea rows=\"10\" x-model=\"comment\" @input=\"showMentions = comment.endsWith('@'); mentionFilter = comment.split('@').pop()\" class=\"w-full text-sm min-h-[250px] p-2 border border-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-vercel-purple focus:border-transparent\" placeholder=\"Write your comment... You can tag users with @\"></textarea><div x-show=\"showMentions\" class=\"absolute left-0 mt-1 w-64 bg-white border border-gray-200 rounded-md shadow-lg\"><template x-for=\"user in filteredUsers()\" :key=\"user.id\"><button @click=\"addMention(user)\" class=\"w-full cursor-pointer px-4 py-2 text-left hover:bg-vercel-purple-light text-sm\" x-text=\"user.name\"></button></template></div></div><div x-show=\"activeTab === 'preview'\" class=\"min-h-[100px] p-2\"><template x-if=\"comment\"><div x-html=\"formatComment(comment)\" class=\"whitespace-pre-line\"></div></template><template x-if=\"!comment\"><p>Nothing to preview</p></template></div></div><div class=\"border-t border-gray-200 p-4 flex justify-between items-center\"><div class=\"flex items-center text-sm text-gray-500\"><p class=\"text-gray-900 text-xs\">First Noticed ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(warnly.TimeAgo(time.Now, discussion.Info.IssueFirstSeen, false))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/discussions.templ`, Line: 67, Col: 117}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, " ago</p></div><button @click=\"postComment()\" class=\"bg-vercel-purple cursor-pointer text-black px-4 py-2 rounded-lg text-sm font-medium hover:bg-opacity-90 transition-colors\">Post</button></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = DiscussionMessages(discussion).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func discussionState(discussion *warnly.Discussion) string {
	uri := fmt.Sprintf("/projects/%d/issues/%d/discussions", discussion.Info.ProjectID, discussion.Info.IssueID)
	json := fmt.Sprintf(`{
        "activeTab": "write",
        "comment": "",
        "showMentions": false,
        "mentionFilter": "",
        "mentionedUsers": [],
        "users": %s,
        "filteredUsers": function() {
            return this.users.filter(user => 
                user.name.toLowerCase().includes(this.mentionFilter.toLowerCase())
            );
        },
        "addMention": function(user) {
            this.comment = this.comment.substring(0, this.comment.lastIndexOf('@')) + '@' + user.name + ' ';
            this.mentionedUsers.push(user.id);
            this.showMentions = false;
        },
        "formatComment": function(comment) {
            let div = document.createElement('div');
            div.textContent = comment;
            let escaped = div.innerHTML;
            return escaped.replace(/@(\w+)/g, '<strong>@$1</strong>')
                         .replace(/\n/g, '<br>');
        },
        "postComment": function() {
            const formData = new FormData();
            formData.append('content', this.comment);
            this.mentionedUsers.forEach(id => {
                formData.append('mentioned_users', id);
            });
            
            htmx.ajax('POST', '%s', {
                values: {
                    content: this.comment,
                    mentioned_users: this.mentionedUsers
                },
                swap: 'outerHTML',
                target: '#messages'
            });
            
            this.comment = '';
            this.mentionedUsers = [];
        }
    }`,
		marshalTeammates(discussion.Teammates),
		uri)

	return json
}

func marshalTeammates(teammates []warnly.Teammate) string {
	result := "["
	for i, teammate := range teammates {
		result += fmt.Sprintf(`{"id": "%d", "name": "%s"}`, teammate.ID, teammate.Username)
		if i < len(teammates)-1 {
			result += ","
		}
	}
	result += "]"
	return result
}

func DiscussionMessages(discussion *warnly.Discussion) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<span hx-swap-oob=\"true\" id=\"message_cnt\" class=\"text-gray-400\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", len(discussion.Messages)))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/discussions.templ`, Line: 146, Col: 110}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</span><div id=\"messages\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for i := range discussion.Messages {
			templ_7745c5c3_Err = renderMessage(discussion.Messages[i], discussion.Info).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func renderMessage(message warnly.IssueMessage, info warnly.DiscussionInfo) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<div class=\"border rounded-lg bg-white shadow-sm mb-4 border-gray-300\" x-data=\"{ dropdownOpen: false }\"><div class=\"p-4\"><div class=\"flex items-center justify-between border-b p-1 border-gray-300\"><div class=\"flex items-center gap-3\"><div class=\"w-8 h-8 rounded flex items-center justify-center text-white bg-black font-medium\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(string(message.Username[0]))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/discussions.templ`, Line: 160, Col: 35}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</div><span class=\"text-sm text-gray-900 font-medium\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(message.Username)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/discussions.templ`, Line: 163, Col: 24}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</span></div><div class=\"flex items-center gap-4\"><span class=\"text-sm text-gray-500\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(warnly.TimeAgo(time.Now, message.CreatedAt, false))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/discussions.templ`, Line: 168, Col: 58}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, " ago</span><div class=\"relative\"><button @click=\"dropdownOpen = !dropdownOpen\" class=\"h-8 w-8 flex items-center justify-center rounded-md hover:bg-gray-100 cursor-pointer\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"1\"></circle><circle cx=\"19\" cy=\"12\" r=\"1\"></circle><circle cx=\"5\" cy=\"12\" r=\"1\"></circle></svg></button><div x-show=\"dropdownOpen\" @click.away=\"dropdownOpen = false\" class=\"absolute border-gray-300 right-0 mt-1 w-36 bg-white rounded-md shadow-lg border py-1\"><a hx-delete=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("/projects/%d/issues/%d/discussions/%d", info.ProjectID, info.IssueID, message.ID))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/discussions.templ`, Line: 177, Col: 116}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\" hx-swap=\"outerHTML settle:0\" hx-target=\"#messages\" class=\"block px-4 py-2 text-sm text-red-600 hover:bg-gray-100 cursor-pointer\">Delete</a></div></div></div></div><div class=\"mt-4 w-full min-h-[100px] resize-none rounded-md p-3 text-sm whitespace-pre-line\"><!-- we used bluemonday sanitizer to prevent XSS on posting this message -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.Raw(formatMessageContent(message.Content)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "</div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func formatMessageContent(content string) string {
	content = strings.ReplaceAll(content, "\n", "<br>")
	content = mentionRegex.ReplaceAllString(content, `<strong>@$1</strong>`)
	return content
}

var _ = templruntime.GeneratedTemplate
